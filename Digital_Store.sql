-- MySQL Script generated by MySQL Workbench
-- Wed Aug  2 21:05:06 2017
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema Digital_Store
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema Digital_Store
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Digital_Store` DEFAULT CHARACTER SET utf8 ;
USE `Digital_Store` ;

-- -----------------------------------------------------
-- Table `Digital_Store`.`PERSON`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Digital_Store`.`PERSON` (
  `SSN` INT UNSIGNED NOT NULL,
  `First_Name` VARCHAR(45) NOT NULL,
  `Last_Name` VARCHAR(45) NOT NULL,
  `Password` VARCHAR(45) NOT NULL,
  `Sex` CHAR(1) NOT NULL DEFAULT 'M',
  `Date_Of_Birth` DATE NOT NULL,
  `Address` VARCHAR(100) NULL,
  `Home_Phone` VARCHAR(16) NULL,
  `Mobile_Phone` VARCHAR(16) NULL,
  `Email` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`SSN`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Digital_Store`.`CEO`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Digital_Store`.`CEO` (
  `SSN` INT UNSIGNED NOT NULL,
  `Legal_Identifier` CHAR(20) NOT NULL,
  `Captal` INT NOT NULL DEFAULT 1000000,
  `Date_Of_Start` DATE NOT NULL,
  `Time_Of_Start` TIME NOT NULL,
  `Date_Of_End` DATE NULL,
  `Time_Of_End` TIME NULL,
  PRIMARY KEY (`SSN`),
  UNIQUE INDEX `Legal_Identifier_UNIQUE` (`Legal_Identifier` ASC),
  CONSTRAINT `SSN_F_1`
    FOREIGN KEY (`SSN`)
    REFERENCES `Digital_Store`.`PERSON` (`SSN`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Digital_Store`.`CUSTOMER`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Digital_Store`.`CUSTOMER` (
  `SSN` INT UNSIGNED NOT NULL,
  `Bank_Card_Number` CHAR(16) NOT NULL,
  PRIMARY KEY (`SSN`),
  CONSTRAINT `SSN_F_2`
    FOREIGN KEY (`SSN`)
    REFERENCES `Digital_Store`.`PERSON` (`SSN`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Digital_Store`.`PAYMENT_STUFF`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Digital_Store`.`PAYMENT_STUFF` (
  `ID` CHAR(10) NOT NULL,
  `Amount` INT UNSIGNED NOT NULL DEFAULT 10,
  `CEO_SSN` INT UNSIGNED NULL,
  `PAYS_Date` DATE NOT NULL,
  `PAYS_Time` TIME NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `CEO_SSN_F_1_idx` (`CEO_SSN` ASC),
  CONSTRAINT `CEO_SSN_F_1`
    FOREIGN KEY (`CEO_SSN`)
    REFERENCES `Digital_Store`.`CEO` (`SSN`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Digital_Store`.`BILL`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Digital_Store`.`BILL` (
  `ID` CHAR(10) NOT NULL,
  `BILL_Type` VARCHAR(45) NOT NULL DEFAULT 'Telephone',
  PRIMARY KEY (`ID`),
  CONSTRAINT `ID_F_1`
    FOREIGN KEY (`ID`)
    REFERENCES `Digital_Store`.`PAYMENT_STUFF` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Digital_Store`.`TAX`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Digital_Store`.`TAX` (
  `ID` CHAR(10) NOT NULL,
  `TAX_Group` VARCHAR(45) NOT NULL DEFAULT 'Mid_Year',
  PRIMARY KEY (`ID`),
  CONSTRAINT `ID_F_2`
    FOREIGN KEY (`ID`)
    REFERENCES `Digital_Store`.`PAYMENT_STUFF` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Digital_Store`.`PRODUCT`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Digital_Store`.`PRODUCT` (
  `ID` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `PRODUCT_Code` CHAR(15) NOT NULL,
  `PRODUCT_Name` VARCHAR(45) NOT NULL,
  `Manufacturer` VARCHAR(45) NOT NULL,
  `Operating_System` VARCHAR(45) NULL,
  `Date_Of_Production` DATE NOT NULL,
  `Purchase_Price` INT NOT NULL,
  `Sales_Price` INT NOT NULL,
  `CEO_SSN` INT UNSIGNED NULL,
  `IMPORTS_Date` DATE NOT NULL,
  `IMPORTS_Time` TIME NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `CEO_SSN_F_2_idx` (`CEO_SSN` ASC),
  CONSTRAINT `CEO_SSN_F_2`
    FOREIGN KEY (`CEO_SSN`)
    REFERENCES `Digital_Store`.`CEO` (`SSN`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Digital_Store`.`ALL_IN_ONE_AND_LAPTOP`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Digital_Store`.`ALL_IN_ONE_AND_LAPTOP` (
  `ID` INT UNSIGNED NOT NULL,
  `CPU` VARCHAR(45) NOT NULL,
  `GPU` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `ID_F_3`
    FOREIGN KEY (`ID`)
    REFERENCES `Digital_Store`.`PRODUCT` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Digital_Store`.`MOBILE_AND_TABLET`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Digital_Store`.`MOBILE_AND_TABLET` (
  `ID` INT UNSIGNED NOT NULL,
  `Number_Of_SIM_Cards` INT UNSIGNED NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`),
  CONSTRAINT `ID_F_4`
    FOREIGN KEY (`ID`)
    REFERENCES `Digital_Store`.`PRODUCT` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Digital_Store`.`SMART_WATCH`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Digital_Store`.`SMART_WATCH` (
  `ID` INT UNSIGNED NOT NULL,
  `Body_Material` VARCHAR(45) NOT NULL DEFAULT 'Aluminum',
  `Band_Type` VARCHAR(45) NOT NULL DEFAULT 'Normal',
  `Water_Resistanancy` CHAR(1) NOT NULL DEFAULT 'N',
  PRIMARY KEY (`ID`),
  CONSTRAINT `ID_F_5`
    FOREIGN KEY (`ID`)
    REFERENCES `Digital_Store`.`PRODUCT` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Digital_Store`.`BUYS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Digital_Store`.`BUYS` (
  `CUSTOMER_SSN` INT UNSIGNED NOT NULL,
  `PRODUCT_ID` INT UNSIGNED NOT NULL,
  `Delivery_Address` VARCHAR(100) NOT NULL,
  `BUYS_Date` DATE NOT NULL,
  `BUYS_Time` TIME NOT NULL,
  PRIMARY KEY (`CUSTOMER_SSN`, `PRODUCT_ID`),
  INDEX `ID_F_6_idx` (`PRODUCT_ID` ASC),
  CONSTRAINT `CUSTOMER_SSN_F_1`
    FOREIGN KEY (`CUSTOMER_SSN`)
    REFERENCES `Digital_Store`.`CUSTOMER` (`SSN`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `PRODUCT_ID_F_1`
    FOREIGN KEY (`PRODUCT_ID`)
    REFERENCES `Digital_Store`.`PRODUCT` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `Digital_Store` ;

-- -----------------------------------------------------
-- Placeholder table for view `Digital_Store`.`INVOICES`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Digital_Store`.`INVOICES` (`SSN` INT, `First_Name` INT, `Last_Name` INT, `ID` INT, `PRODUCT_Code` INT, `PRODUCT_Name` INT, `Manufacturer` INT, `Operating_System` INT, `Date_Of_Production` INT, `Sales_Price` INT, `Delivery_Address` INT, `BUYS_Date` INT, `BUYS_Time` INT);

-- -----------------------------------------------------
-- Placeholder table for view `Digital_Store`.`PRODUCT_AVAILABLE`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Digital_Store`.`PRODUCT_AVAILABLE` (`ID` INT, `PRODUCT_Code` INT, `PRODUCT_Name` INT, `Manufacturer` INT, `Operating_System` INT, `Date_Of_Production` INT, `Purchase_Price` INT, `Sales_Price` INT, `CEO_SSN` INT, `IMPORTS_Date` INT, `IMPORTS_Time` INT);

-- -----------------------------------------------------
-- Placeholder table for view `Digital_Store`.`ALL_IN_ONE_AND_LAPTOP_AVAILABLE`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Digital_Store`.`ALL_IN_ONE_AND_LAPTOP_AVAILABLE` (`ID` INT, `CPU` INT, `GPU` INT);

-- -----------------------------------------------------
-- Placeholder table for view `Digital_Store`.`MOBILE_AND_TABLET_AVAILABLE`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Digital_Store`.`MOBILE_AND_TABLET_AVAILABLE` (`ID` INT, `Number_Of_SIM_Cards` INT);

-- -----------------------------------------------------
-- Placeholder table for view `Digital_Store`.`SMART_WATCH_AVAILABLE`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Digital_Store`.`SMART_WATCH_AVAILABLE` (`ID` INT, `Body_Material` INT, `Band_Type` INT, `Water_Resistanancy` INT);

-- -----------------------------------------------------
-- procedure Stock
-- -----------------------------------------------------

DELIMITER $$
USE `Digital_Store`$$
CREATE PROCEDURE `Stock` ()
BEGIN
	CREATE VIEW TEMP1 AS
	SELECT	sum(P.Sales_Price) AS Profit
	FROM	BUYS AS B, PRODUCT AS P
	WHERE	B.PRODUCT_ID = P.ID;
	
	CREATE VIEW TEMP2 AS
	SELECT	sum(P.Purchase_Price) AS S_P
	FROM	PRODUCT AS P;
	
	CREATE VIEW TEMP3 AS
	SELECT	sum(Amount) AS A
	FROM	PAYMENT_STUFF;
	
	SELECT	sum(Captal - Profit - S_P - A) AS Stock
	FROM	TEMP1, TEMP2, TEMP3, CEO
	WHERE	Date_Of_End IS NULL;
	
	DROP VIEW TEMP1;
	
	DROP VIEW TEMP2;
	
	DROP VIEW TEMP3;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CEO_Personal_Information
-- -----------------------------------------------------

DELIMITER $$
USE `Digital_Store`$$
CREATE PROCEDURE `CEO_Personal_Information` (IN Input_SSN INTEGER, IN Input_Password VARCHAR(45))
BEGIN
	SELECT *
	FROM Digital_Store.PERSON
	WHERE SSN = Input_SSN AND Password = Input_Password;
	
	SELECT * FROM Digital_Store.CUSTOMER
	WHERE SSN = Input_SSN;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function PERSON_Volume
-- -----------------------------------------------------

DELIMITER $$
USE `Digital_Store`$$
CREATE FUNCTION `PERSON_Volume` ()
RETURNS INTEGER
BEGIN
	DECLARE	PERSON_Volume INTEGER;
    SELECT	count(SSN) INTO PERSON_Volume
	FROM	PERSON;
	RETURN	PERSON_Volume;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function Available_Product_Volume
-- -----------------------------------------------------

DELIMITER $$
USE `Digital_Store`$$
CREATE FUNCTION `Available_Product_Volume` ()
RETURNS INTEGER
BEGIN
	DECLARE	Available_Product_Volume INTEGER;
    SELECT	count(ID) INTO Available_Product_Volume
	FROM	product_available;
	RETURN	Available_Product_Volume;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `Digital_Store`.`INVOICES`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Digital_Store`.`INVOICES`;
USE `Digital_Store`;
CREATE  OR REPLACE VIEW `INVOICES` AS
SELECT	P.SSN, P.First_Name, P.Last_Name, PR.ID, PR.PRODUCT_Code, PR.PRODUCT_Name, PR.Manufacturer, PR.Operating_System, PR.Date_Of_Production, PR.Sales_Price, B.Delivery_Address, B.BUYS_Date, B.BUYS_Time
FROM	PERSON AS P, CUSTOMER AS C, PRODUCT AS PR, BUYS AS B
WHERE	P.SSN = C.SSN AND C.SSN = B.CUSTOMER_SSN AND PR.ID = B.PRODUCT_ID;

-- -----------------------------------------------------
-- View `Digital_Store`.`PRODUCT_AVAILABLE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Digital_Store`.`PRODUCT_AVAILABLE`;
USE `Digital_Store`;
CREATE  OR REPLACE VIEW `PRODUCT_AVAILABLE` AS
SELECT	*
FROM	PRODUCT As P
WHERE	NOT EXISTS (
	SELECT *
    FROM	BUYS AS B
    WHERE	P.ID = B.PRODUCT_ID
);

-- -----------------------------------------------------
-- View `Digital_Store`.`ALL_IN_ONE_AND_LAPTOP_AVAILABLE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Digital_Store`.`ALL_IN_ONE_AND_LAPTOP_AVAILABLE`;
USE `Digital_Store`;
CREATE  OR REPLACE VIEW `ALL_IN_ONE_AND_LAPTOP_AVAILABLE` AS
SELECT A.ID, A.CPU, A.GPU
FROM Digital_Store.product_available AS P, ALL_IN_ONE_AND_LAPTOP AS A
WHERE	P.ID = A.ID;

-- -----------------------------------------------------
-- View `Digital_Store`.`MOBILE_AND_TABLET_AVAILABLE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Digital_Store`.`MOBILE_AND_TABLET_AVAILABLE`;
USE `Digital_Store`;
CREATE  OR REPLACE VIEW `MOBILE_AND_TABLET_AVAILABLE` AS
SELECT M.ID, M.Number_Of_SIM_Cards
FROM Digital_Store.product_available AS P,  MOBILE_AND_TABLET AS M
WHERE	P.ID = M.ID;

-- -----------------------------------------------------
-- View `Digital_Store`.`SMART_WATCH_AVAILABLE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Digital_Store`.`SMART_WATCH_AVAILABLE`;
USE `Digital_Store`;
CREATE  OR REPLACE VIEW `SMART_WATCH_AVAILABLE` AS
SELECT S.ID, S.Body_Material, S.Band_Type, S.Water_Resistanancy
FROM Digital_Store.product_available AS P,  SMART_WATCH AS S
WHERE	P.ID = S.ID;
USE `Digital_Store`;

DELIMITER $$
USE `Digital_Store`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Digital_Store`.`CEO_DATE_OF_START_VIOLATION_BEFORE_INSERT` BEFORE INSERT ON `CEO` FOR EACH ROW
BEGIN
    IF NEW.Date_Of_Start <= (SELECT Date_Of_End FROM CEO WHERE SSN = NEW.SSN - 1) THEN
        SET NEW.Date_Of_Start = '9999-12-31';
    END IF;
END$$

USE `Digital_Store`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Digital_Store`.`CEO_DATE_OF_START_VIOLATION_BEFORE_UPDATE` BEFORE UPDATE ON `CEO` FOR EACH ROW
BEGIN
    IF NEW.Date_Of_Start <= (SELECT Date_Of_End FROM CEO WHERE SSN = NEW.SSN - 1) THEN
        SET NEW.Date_Of_Start = '9999-12-31';
    END IF;
END$$

USE `Digital_Store`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Digital_Store`.`PRODUCT_COMPATIBILITY_BEFORE_INSERT` BEFORE INSERT ON `PRODUCT` FOR EACH ROW
BEGIN
    IF NEW.Manufacturer = 'Apple' AND (NEW.Operating_System NOT LIKE '%macOS%' AND NEW.Operating_System NOT LIKE '%iOS%' AND NEW.Operating_System NOT LIKE '%watchOS%') THEN
        SET NEW.Operating_System = NULL;
    ELSEIF NEW.Manufacturer = 'Microsoft' AND (NEW.Operating_System NOT LIKE '%Windows%') THEN
        SET NEW.Operating_System = NULL;
    ELSEIF NEW.Manufacturer = 'Google' AND (NEW.Operating_System NOT LIKE '%Android%' AND NEW.Operating_System NOT LIKE '%Chrome%') THEN
        SET NEW.Operating_System = NULL;
    END IF;
END$$

USE `Digital_Store`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Digital_Store`.`PRODUCT_COMPATIBILITY_BEFORE_UPDATE` BEFORE UPDATE ON `PRODUCT` FOR EACH ROW
BEGIN
    IF NEW.Manufacturer = 'Apple' AND (NEW.Operating_System NOT LIKE '%macOS%' AND NEW.Operating_System NOT LIKE '%iOS%' AND NEW.Operating_System NOT LIKE '%watchOS%') THEN
        SET NEW.Operating_System = NULL;
    ELSEIF NEW.Manufacturer = 'Microsoft' AND (NEW.Operating_System NOT LIKE '%Windows%') THEN
        SET NEW.Operating_System = NULL;
    ELSEIF NEW.Manufacturer = 'Google' AND (NEW.Operating_System NOT LIKE '%Android%' AND NEW.Operating_System NOT LIKE '%Chrome%') THEN
        SET NEW.Operating_System = NULL;
    END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
